-- USER TABLE
CREATE TABLE tortoiseForge_user
(
    user_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_name           VARCHAR2(15 CHAR),
    user_password       VARCHAR2(130 CHAR),
    user_email          VARCHAR2(320 CHAR),
    user_img            VARCHAR2(100 CHAR),
    user_about_me       CLOB,
    user_creation_time  TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    user_update_time    TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    
    user_status         NUMBER NOT NULL,
    role_seq            NUMBER NOT NULL,
    
    CONSTRAINT tortoise_user_seq        PRIMARY KEY (user_seq),
    CONSTRAINT tortoise_user_name       UNIQUE (user_name),
    CONSTRAINT tortoise_user_email      UNIQUE (user_email),
    CONSTRAINT fk_tortoise_user_role    FOREIGN KEY (role_seq) REFERENCES tortoiseForge_user_role(role_seq),
    CONSTRAINT fk_tortoise_user_status  FOREIGN KEY (user_status) REFERENCES tortoiseForge_user_status(status_seq)
);


-- USER ROLES TABLE
CREATE TABLE tortoiseForge_user_role
(
    role_seq            NUMBER PRIMARY KEY,
    role_name           VARCHAR2(15 CHAR),
    role_description    VARCHAR2(400 CHAR)
);

INSERT INTO tortoiseForge_user_role (role_seq, role_name, role_description) VALUES (0, 'user', 'A regular user with standard access.');
INSERT INTO tortoiseForge_user_role (role_seq, role_name, role_description) VALUES (1, 'manager', 'A user with managerial privileges.');
INSERT INTO tortoiseForge_user_role (role_seq, role_name, role_description) VALUES (2, 'tortoise', 'The tortoise, administrator.');


-- USER STATUS TABLE
CREATE TABLE tortoiseForge_user_status
(
    status_seq            NUMBER PRIMARY KEY,
    status_name           VARCHAR2(100 CHAR),
    status_description    VARCHAR2(400 CHAR)
);


INSERT INTO tortoiseForge_user_status (status_seq, status_name, status_description) VALUES (0, 'active', 'Active account.');
INSERT INTO tortoiseForge_user_status (status_seq, status_name, status_description) VALUES (1, 'suspended', 'Suspended account.');
INSERT INTO tortoiseForge_user_status (status_seq, status_name, status_description) VALUES (2, 'scheduled_for_deletion', 'Account scheduled for deletion.');
INSERT INTO tortoiseForge_user_status (status_seq, status_name, status_description) VALUES (3, 'scheduled_for_deactivation', 'Account scheduled for deactivation(anonymization)');
INSERT INTO tortoiseForge_user_status (status_seq, status_name, status_description) VALUES (4, 'deactivated', 'Permanently deactivated(anonymized) account');


-- POST TYPE TABLE

CREATE TABLE tortoiseForge_discussionBoard_post_type
(
    type_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    type_name           VARCHAR2(15 CHAR),
    type_description    VARCHAR2(400 CHAR),
    
    CONSTRAINT tortoise_postType_seq    PRIMARY KEY(type_seq)
);

INSERT INTO tortoiseForge_discussionBoard_post_type (type_seq, type_name, type_description) VALUES (0, 'post', 'normal post');
INSERT INTO tortoiseForge_discussionBoard_post_type (type_seq, type_name, type_description) VALUES (1, 'announcement', 'announcement / notice');


-- POST TABLE

CREATE TABLE tortoiseForge_discussionBoard_post
(
    post_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    type_seq            NUMBER NOT NULL,
    post_title          VARCHAR2(100 CHAR) not null,
    post_creation_time  TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    post_updated_time   TIMESTAMP WITH TIME ZONE,
    post_views          NUMBER DEFAULT 0,
    user_seq            NUMBER NOT NULL,
    
    CONSTRAINT tortoise_post_seq        PRIMARY KEY (post_seq),
    CONSTRAINT fk_tortoise_post_type    FOREIGN KEY (type_seq)  REFERENCES tortoiseForge_discussionBoard_post_type(type_seq),
    CONSTRAINT fk_tortoise_post_user    FOREIGN KEY (user_seq)  REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE
);


-- POST LIKE TABLE

CREATE TABLE tortoiseForge_discussionBoard_post_like
(
    like_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    post_seq            NUMBER NOT NULL,
    user_seq            NUMBER NOT NULL,
    like_time           TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    
    CONSTRAINT tortoise_post_like_seq        PRIMARY KEY (like_seq),
    CONSTRAINT fk_tortoise_post_like_post    FOREIGN KEY (post_seq) REFERENCES tortoiseForge_discussionBoard_post(post_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_post_like_user    FOREIGN KEY (user_seq) REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE
);


-- POST CONTENT TYPE TABLE

CREATE TABLE tortoiseForge_discussionBoard_post_content_type
(
    type_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    type_name           VARCHAR2(15 CHAR),
    type_description    VARCHAR2(400 CHAR),
    
    CONSTRAINT tortoise_post_ContentType_seq    PRIMARY KEY(type_seq)
);


INSERT INTO tortoiseForge_discussionBoard_post_content_type (type_seq, type_name, type_description) VALUES (0, 'text', 'simple text');
INSERT INTO tortoiseForge_discussionBoard_post_content_type (type_seq, type_name, type_description) VALUES (1, 'boldText', 'bold text');
INSERT INTO tortoiseForge_discussionBoard_post_content_type (type_seq, type_name, type_description) VALUES (2, 'image', 'image');



-- POST CONTENT TABLE

CREATE TABLE tortoiseForge_discussionBoard_post_content 
(
    content_seq         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    content_value       CLOB NOT NULL,
    type_seq            NUMBER NOT NULL,
    post_seq            NUMBER NOT NULL,
    
    CONSTRAINT tortoise_content_seq             PRIMARY KEY (content_seq),
    CONSTRAINT fk_tortoise_content_type         FOREIGN KEY (type_seq)  REFERENCES tortoiseForge_discussionBoard_post_content_type(type_seq),
    CONSTRAINT fk_tortoise_content_post         FOREIGN KEY (post_seq)  REFERENCES tortoiseForge_discussionBoard_post(post_seq) ON DELETE CASCADE
);

-- POST COMMENT TABLE

CREATE TABLE tortoiseForge_discussionBoard_post_comment
(
    comment_seq             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    comment_content         VARCHAR2(1000 CHAR) NOT NULL,
    comment_creation_time   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    comment_updated_time    TIMESTAMP WITH TIME ZONE,
    post_seq                NUMBER NOT NULL,
    user_seq                NUMBER NOT NULL,
    parent_comment_seq      NUMBER,
    target_comment_seq      NUMBER,
    
    CONSTRAINT tortoise_comment_seq                 PRIMARY KEY (comment_seq),
    CONSTRAINT fk_tortoise_comment_post             FOREIGN KEY (post_seq) REFERENCES tortoiseForge_discussionBoard_post(post_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_comment_user             FOREIGN KEY (user_seq) REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_comment_parent_comment   FOREIGN KEY (parent_comment_seq) REFERENCES tortoiseForge_discussionBoard_post_comment(comment_seq) ON DELETE CASCADE
);


-- POST COMMENT LIKE TABLE

CREATE TABLE tortoiseForge_discussionBoard_post_comment_like
(
    like_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    comment_seq         NUMBER NOT NULL,
    user_seq            NUMBER NOT NULL,
    like_time           TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    
    
    CONSTRAINT tortoise_comment_like_seq        PRIMARY KEY (like_seq),
    CONSTRAINT fk_tortoise_comment_like_post    FOREIGN KEY (comment_seq) REFERENCES tortoiseForge_discussionBoard_post_comment(comment_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_comment_like_user    FOREIGN KEY (user_seq) REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE
);


-- MESSAGE TABLE
CREATE TABLE tortoiseForge_message
(
    message_seq             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    message_content         VARCHAR2(4000 CHAR) NOT NULL,
    message_creation_time   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    
    sender_seq              NUMBER,
    recipient_seq           NUMBER,
    read_at                 TIMESTAMP WITH TIME ZONE,
    opened_at               TIMESTAMP WITH TIME ZONE,
    deleted_at_sender       TIMESTAMP NULL,
    deleted_at_recipient    TIMESTAMP NULL,
    
    
    CONSTRAINT tortoise_message_seq             PRIMARY KEY (message_seq),
    CONSTRAINT fk_tortoise_message_sender       FOREIGN KEY (sender_seq)    REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_message_recipient    FOREIGN KEY (recipient_seq) REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE
);


-- REPORT STATUS
CREATE TABLE tortoiseForge_report_status
(
    status_seq            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    status_name           VARCHAR2(15 CHAR),
    status_description    VARCHAR2(400 CHAR),
    
    CONSTRAINT tortoise_report_status_seq    PRIMARY KEY(status_seq)
);

INSERT INTO tortoiseForge_report_status (status_seq, status_name, status_description)   VALUES (0, 'pending', 'pending');
INSERT INTO tortoiseForge_report_status (status_seq, status_name, status_description)   VALUES (1, 'reviewed', 'reviewed');
INSERT INTO tortoiseForge_report_status (status_seq, status_name, status_description)   VALUES (2, 'rejected', 'rejected');

-- REPORT TABLE
CREATE TABLE tortoiseForge_report_log
(
    report_seq          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    report_reason       VARCHAR2(1000 CHAR) NULL,
    report_time         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP AT TIME ZONE 'UTC',
    report_status       NUMBER NOT NULL,
    
    reporter_seq        NUMBER,
    target_seq          NUMBER,
    handled_by          NUMBER,
    handled_time        TIMESTAMP WITH TIME ZONE,
    notes               VARCHAR2(1000 CHAR) NULL,
    
    CONSTRAINT tortoise_report_log_seq          PRIMARY KEY(report_seq),
    CONSTRAINT fk_tortoise_report_reporter      FOREIGN KEY (reporter_seq)  REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_report_target        FOREIGN KEY (target_seq)    REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE,
    CONSTRAINT fk_tortoise_report_status        FOREIGN KEY (report_status) REFERENCES tortoiseForge_report_status(status_seq),
    CONSTRAINT fk_tortoise_report_handled_by    FOREIGN KEY (handled_by)    REFERENCES tortoiseForge_user(user_seq) ON DELETE CASCADE
)



 -------------------------------- FUNCTIONS AND PROCEDURES ---------------------------------

-- CREATE USER
CREATE OR REPLACE FUNCTION tortoiseForge_createUser
(
    p_user_name       IN tortoiseForge_user.user_name%TYPE,
    p_user_password   IN tortoiseForge_user.user_password%TYPE,
    p_user_email      IN tortoiseForge_user.user_email%TYPE
)  
RETURN NUMBER
AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    same_user_name NUMBER;
    same_user_email NUMBER;
BEGIN
    SELECT COUNT(*) INTO same_user_name
    FROM tortoiseForge_user
    WHERE user_name = p_user_name;
    
    SELECT COUNT(*) INTO same_user_email
    FROM tortoiseForge_user
    WHERE user_email = p_user_email;
        
    IF same_user_name = 0 AND same_user_email = 0 THEN 
        INSERT INTO tortoiseForge_user(user_name, user_password, user_email, user_img, user_status, role_seq)
        VALUES(p_user_name, p_user_password, p_user_email, NULL, 0, 0);
        COMMIT;
        RETURN 0;
    ELSIF same_user_name != 0 THEN
        RETURN 1;
    ELSIF same_user_email != 0 THEN
        RETURN 2;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RETURN -1;
END;


-- ADD COMMENT
CREATE OR REPLACE PROCEDURE tortoiseForge_discussionBoard_add_comment 
(
    p_user_seq                  IN tortoiseForge_user.user_seq%TYPE,
    p_post_seq                  IN tortoiseForge_discussionBoard_post.post_seq%TYPE,
    p_subject_comment_seq       IN tortoiseForge_discussionBoard_post_comment.comment_seq%TYPE,
    p_comment_content           IN tortoiseForge_discussionBoard_post_comment.comment_content%TYPE,
    p_result                    OUT NUMBER
) 
IS
    v_holder NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_holder 
    FROM tortoiseForge_discussionBoard_post
    WHERE post_seq = p_post_seq;
    
    IF v_holder = 0 THEN
        p_result := 1;
        RETURN;
    END IF;
    
    IF p_subject_comment_seq IS NULL THEN
        INSERT INTO tortoiseForge_discussionBoard_post_comment (comment_content, post_seq, user_seq)
        VALUES (p_comment_content, p_post_seq, p_user_seq);
        p_result := 0;
        RETURN;
    ELSE
        SELECT COUNT(*) INTO v_holder
        FROM tortoiseForge_discussionBoard_post_comment
        WHERE comment_seq = p_subject_comment_seq;
    
        IF v_holder = 0 THEN
            p_result := 2;
            RETURN;
        END IF;
    
        SELECT parent_comment_seq INTO v_holder
        FROM tortoiseForge_discussionBoard_post_comment
        WHERE comment_seq = p_subject_comment_seq;
        
        IF v_holder IS NULL THEN    
            INSERT INTO tortoiseForge_discussionBoard_post_comment (comment_content, post_seq, user_seq, parent_comment_seq)
            VALUES (p_comment_content, p_post_seq, p_user_seq, p_subject_comment_seq);
            p_result := 0;
            RETURN;
        ELSE
            INSERT INTO tortoiseForge_discussionBoard_post_comment (comment_content, post_seq, user_seq, parent_comment_seq, target_comment_seq)
            VALUES (p_comment_content, p_post_seq, p_user_seq, v_holder, p_subject_comment_seq);
            p_result := 0;
            RETURN;
        END IF;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
    p_result := -1;
    RAISE;

END tortoiseForge_discussionBoard_add_comment;
/


-- DELETE COMMENT
CREATE OR REPLACE PROCEDURE tortoiseForge_discussionBoard_delete_comment 
(
    p_user_seq                  IN tortoiseForge_user.user_seq%TYPE,
    p_post_seq                  IN tortoiseForge_discussionBoard_post.post_seq%TYPE,
    p_subject_comment_seq       IN tortoiseForge_discussionBoard_post_comment.comment_seq%TYPE,
    p_result                    OUT NUMBER
) 
IS
    v_holder NUMBER;
    v_holder2 NUMBER;
    v_holder3 tortoiseForge_user.user_name%TYPE;
BEGIN

    SELECT COUNT(*) INTO v_holder 
    FROM tortoiseForge_discussionBoard_post
    WHERE post_seq = p_post_seq;
    
    IF v_holder = 0 THEN
        p_result := 1;
        RETURN;
    END IF;
    
    
    SELECT COUNT(*) INTO v_holder
    FROM tortoiseForge_discussionBoard_post_comment
    WHERE comment_seq = p_subject_comment_seq;
    
    IF v_holder = 0 THEN
        p_result := 2;
        RETURN;
    END IF;
    
    
    SELECT user_seq, parent_comment_seq 
    INTO v_holder, v_holder2
    FROM tortoiseForge_discussionBoard_post_comment
    WHERE comment_seq = p_subject_comment_seq;
    
    IF v_holder != p_user_seq THEN
        p_result := 3;
        RETURN;
    END IF;
    
    SELECT user_name INTO v_holder3 
    FROM tortoiseForge_user 
    WHERE user_seq = p_user_seq;
    
    IF v_holder2 IS NULL THEN
        DELETE FROM tortoiseForge_discussionBoard_post_comment
        WHERE parent_comment_seq = p_subject_comment_seq;
        
        DELETE FROM tortoiseForge_discussionBoard_post_comment
        WHERE comment_seq = p_subject_comment_seq;
    ELSE 
        UPDATE tortoiseForge_discussionBoard_post_comment 
        SET comment_content = '@' || v_holder3 || ' ' || comment_content,
            target_comment_seq = null
        WHERE target_comment_seq = p_subject_comment_seq;
        
        DELETE FROM tortoiseForge_discussionBoard_post_comment
        WHERE comment_seq = p_subject_comment_seq;
    END IF;
    
    p_result := 0;
    RETURN;
    
EXCEPTION
    WHEN OTHERS THEN
    p_result := -1;
    RAISE;
END tortoiseForge_discussionBoard_delete_comment;
/


-- UPDATE COMMENT
CREATE OR REPLACE PROCEDURE tortoiseForge_discussionBoard_update_comment 
(
    p_user_seq                  IN tortoiseForge_user.user_seq%TYPE,
    p_post_seq                  IN tortoiseForge_discussionBoard_post.post_seq%TYPE,
    p_subject_comment_seq       IN tortoiseForge_discussionBoard_post_comment.comment_seq%TYPE,
    p_comment_content           IN tortoiseForge_discussionBoard_post_comment.comment_content%TYPE,
    p_result                    OUT NUMBER
) 
IS
    v_holder NUMBER;
BEGIN

    SELECT COUNT(*) INTO v_holder 
    FROM tortoiseForge_discussionBoard_post
    WHERE post_seq = p_post_seq;
    
    IF v_holder = 0 THEN
        p_result := 1;
        RETURN;
    END IF;

    
    SELECT COUNT(*) INTO v_holder
    FROM tortoiseForge_discussionBoard_post_comment
    WHERE comment_seq = p_subject_comment_seq;
    
    IF v_holder = 0 THEN
        p_result := 2;
        RETURN;
    END IF;
    
    
    SELECT user_seq INTO v_holder
    FROM tortoiseForge_discussionBoard_post_comment
    WHERE comment_seq = p_subject_comment_seq;
    
    IF v_holder != p_user_seq THEN
        p_result := 3;
        RETURN;
    END IF;
    
    
    UPDATE tortoiseForge_discussionBoard_post_comment
    SET comment_content = p_comment_content,
        comment_updated_time = CURRENT_TIMESTAMP AT TIME ZONE 'UTC'
    WHERE comment_seq = p_subject_comment_seq;
    
    p_result := 0;
    RETURN;
    
EXCEPTION
    WHEN OTHERS THEN
    p_result := -1;
    RAISE;
END tortoiseForge_discussionBoard_update_comment;
/




-- DELETE TABLS
drop table tortoiseForge_message;
drop table tortoiseForge_report_log;
drop table tortoiseForge_discussionBoard_post_comment_like;
drop table tortoiseForge_discussionBoard_post_comment;
drop table tortoiseForge_discussionBoard_post_content;
drop table tortoiseForge_discussionBoard_post_like;
drop table tortoiseForge_discussionBoard_post;
drop table tortoiseForge_user;

